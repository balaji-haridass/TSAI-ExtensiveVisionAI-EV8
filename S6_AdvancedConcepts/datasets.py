# -*- coding: utf-8 -*-
"""datasets.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1kISGURdI-hAu0xEe_Kb7v09oKDY2iNk8
"""

from __future__ import print_function
import torch
from torchvision import datasets, transforms

class TorchDataset:

  @staticmethod
  def get_dataset(name="", path='./data', train=True, download=True, transform=None ):
    #define all key datasets
    dataset = {
      "MNIST": datasets.MNIST,
      "FashionMNIST": datasets.FashionMNIST,
      "CIFAR10": datasets.CIFAR10   
    }

    if name in dataset:
      # use the corresponding dataset to load
      print(f"Downloading....dataset{name}")
      data = dataset[name](path, train=train, download = download, transform = transform)
    else:
      print(f"Unknown....dataset{name}")
      data = None
    return data

  @staticmethod
  def load_data(dataset, cuda=True, shuffle=True, batch_size=128, num_workers=2):
    if cuda:
      dataloader_args = dict(shuffle=shuffle, batch_size=batch_size, num_workers=num_workers, pin_memory=True)
    else:
      dataloader_args = dict(shuffle=shuffle, batch_size=batch_size)
    
    # load the dataset based on the parameters
    loader = torch.utils.data.DataLoader(dataset, **dataloader_args)
    return loader

class TorchTransforms:

  @staticmethod
  def get_transforms(do_transform):
    transform_list = []
    tf = None
    for k, v in do_transform.items():
      if "Resize" == k:
        tf = transforms.Resize(v)
      elif "ToTensor" == k:
        tf = transforms.ToTensor()
      elif "Normalize" == k:         
        tf = transforms.Normalize((v[0]),(v[1]))
      elif "RandomRotation" == k:
        tf = transforms.RandomRotation((-10.0, 10.0), fill=(1,))
      else:
        print(f"Transform..{k} not supported")
        continue

      transform_list.append(tf)

    return transform_list

"""Example Code

```
# Test
do_transform = {
    "Resize": 28,
    "ToTensor": None,
    "Normalize": [0.3, 0.5], 
    "RandomRotation": [-10, 10, 1]     
}

tl = TorchTransforms.get_transforms(do_transform)
print(tl)
```


"""